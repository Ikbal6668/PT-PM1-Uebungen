Schreiben Sie eine Prozedur
float nullstelle(float a, float b, float c),
die die erste (kleinere) Nullstelle einer quadratischen Funktion der Form ax2+bx+c berechnet
und zurückgibt. Denken Sie an die verschiedenen Sonderfälle, etwa wenn es keine Nullstellen
gibt oder die Funktion nicht quadratisch (a = 0) oder gar konstant (a = 0 und b = 0) ist. Falls
es keine Nullstelle gibt, geben Sie Float.NaN zurück. Zum Test auf diesen Wert verwenden
Sie Float.isNaN().
Schreiben Sie eine Testprozedur für nullstelle().

– Bestandteil der SW-Entwicklung
– System-, Integration-, Unit-Tests
– Basis: Spezifikation + Prozedur-Signatur
– Testen von
* Rückgabe
* Zustand
• Äquivalenzklassen, Testabdeckung
– vergleichbares Verhalten bezüglich Eingabe


Lösung:

void setup() {
  size(100, 100);
  background(255, 255, 255);
  
  // 2x^ - 3x - 2 -> Nullstellen -0.5 und 2
  println(nullstelle(2,-3,-2));
  // x^2 -> doppekte Nullstelle 0 
  println(nullstelle(1,0,0));
  // x^ + 1 -> keine Nullstelle
  println(nullstelle(1,0,1));
  // linear: Nullstelle bei -1
  println(nullstelle(0,1,1));
  
  testNullstelle();
}

/**
 * Mit diesem Flag aktiviert/deaktiviert man den Tracing Modus.
 */
private final boolean TRACE_MODUS = true;

/**
 * Dieses Flag speichert den aktuellen Stand des Tests. Hat es
 * den Wert true, sind alle bisherigen Testfälle erfolgreich.
 */
boolean alleTestsErfolgreich = true;

/**
 * Übergabe einer Tracing-Nachricht zur Ausgabe, falls der Tracing-Modus aktiviert ist.
 */
public void trace(String ausgabe){
  if (TRACE_MODUS){
    println(ausgabe);
  }
}

/**
 * Prüft, ob die beiden Variablen soll und ist den gleichen
 * Wert haben. Ergebnis fliesst in globale Variable
 * alleTestsErfolgreich ein.
 */
void testeInt(int soll, int ist) {
  alleTestsErfolgreich = alleTestsErfolgreich && ist == soll;
}

/**
 * Prüft, ob die beiden Variablen soll und ist den gleichen
 * Wert haben. Ergebnis fliesst in globale Variable
 * alleTestsErfolgreich ein.
 */
void testeFloat(float soll, float ist, float toleranz) {
  alleTestsErfolgreich = alleTestsErfolgreich && abs(ist - soll) < toleranz;
}

/**
 * Berechnet die erste (kleinere) Nullstelle einer quadratischen Funktion der Form
 * ax^2 + bx + c.
 */
float nullstelle(float a, float b, float c){
  if (a == 0){
    // keine quadratische Funktion
    if ( b == 0 ){
      // konstante Funktion
      return Float.NaN;
    } else {
      // lineare Funktion
      return -c/b;
    }
  }
  
  float p = b/a;
  float q = c/a;
  float wurzelAusdruck = p*p/4.0 - q;
  if ( wurzelAusdruck < 0 ){
    // keine Nullstelle
    return Float.NaN;
  }
  float x0 = -p/2.0f - sqrt(wurzelAusdruck);
  return x0;
}

/**
 * Testprozedur für die Prozedur nullstelle().
 */
void testNullstelle(){
   // 2x^ - 3x - 2 -> Nullstellen -0.5 und 2
  testeFloat(-0.5f, nullstelle(2,-3,-2), 1e-4f);
  // x^2 -> doppekte Nullstelle 0 
  testeFloat(0f, nullstelle(1,0,0), 1e-4f);
  // x^ + 1 -> keine Nullstelle
  alleTestsErfolgreich = alleTestsErfolgreich && Float.isNaN(nullstelle(1,0,1));
  // linear: Nullstelle bei -1
  testeFloat(-1f, nullstelle(0,1,1), 1e-4f);
  println("Alle Tests für nullstelle() erfolgreich: " + alleTestsErfolgreich);
}

Ausgabe: 

-0.5
-0.0
NaN
-1.0
Alle Tests für nullstelle() erfolgreich: true
